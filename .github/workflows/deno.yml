const bip39 = require('bip39');
const hdkey = require('ethereumjs-wallet/hdkey');
const { toHex } = require('ethereumjs-util');
const { TonClient } = require('@tonclient/core');

const walletAddress = "4818f679ede118884806590b9b705a00fa6aa0cf7009d4b3d128ff263b031c88";
const seedPhrase = "kingdom hungry number apple plug borrow flame dose broken reject roof worry gallery gaze cost mind similar stool retire nephew unable prize involve slim";

// Derive keys from seed phrase
const seed = bip39.mnemonicToSeedSync(seedPhrase);
const hdWallet = hdkey.fromMasterSeed(seed);
const wallet = hdWallet.derivePath(`m/44'/60'/0'/0/0`).getWallet();
const publicKey = "dd659500fa0de6f0f4832f6feeb8a2b0f936b18879090eddb484759cea4b803257a8ed7fc90ddeed12e042387db4ec44ddc3cebdaba4bc93457e56626bd68a09";
const secretKey = toHex(wallet.getPrivateKey());

const callSet = {
    function_name: "setWalletType",
    input: {
        new_wallet_type: "wallet_v3R2"
    }
};

const signer = {
    type: "Keys",
    keys: {
        public: publicKey,
        secret: secretKey
    }
};

const dataCells = "x{000003A829A9A31720CC7B53E49B682279104AE905DA0D456D45ADE97DDB547E22B28069095F09154_}";

async function updateWalletType() {
    try {
        const client = new TonClient({ network: { server_address: 'https://main.ton.dev' } });
        await client.setup();
        const { message } = await client.abi.encode_message({
            address: walletAddress,
            call_set: callSet,
            signer: signer,
            abi: {
                type: "Contract",
                value: {
                    "ABI version": 2,
                    header: ["time", "expire"],
                    functions: [
                        {
                            name: "setWalletType",
                            inputs: [
                                { name: "new_wallet_type", type: "string" }
                            ],
                            outputs: []
                        ]
                    ],
                    data: [],
                    events: []
                }
            },
            data: dataCells // Add the data cells here if needed
        });

        await client.processing.send_message({
            message,
            send_events: false
        });
        console.log("Wallet type successfully updated to v3R2");
    } catch (error) {
        console.error("Error updating wallet type:", error);
    }
}

// Call the function
updateWalletType();# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      - name: Run linter
        run: deno lint

      - name: Run tests
        run: deno test -A
